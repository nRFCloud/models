import {VersionedContext, VersionedContextInterface} from '../model/VersionedContext';
import {URLValue} from '../value/URLValue';
import {HttpProblemSchema} from '../../dist/generated/HttpProblemSchema';
import { JSONSerializeable } from './JSONSerializeable';

const t = require('tcomb');

const NonEmpytyStringType = t.refinement(t.String, (s: string) => s && s.length > 0, 'MaybeNonEmpytyStringType');
const MaybeNonEmpytyStringType = t.maybe(NonEmpytyStringType);
const HttpStatusCodeType = t.refinement(t.Integer, (n: number) => n >= 100 && n < 600, 'HttpStatusCodeType');

/**
 * See https://datatracker.ietf.org/doc/draft-ietf-appsawg-http-problem/
 */
export class HttpProblem extends Error implements VersionedContextInterface, JSONSerializeable {
    static $context = new URLValue('https://www.ietf.org/id/draft-ietf-appsawg-http-problem-01.txt');
    static $contextVersion = 1;

    readonly $context: URLValue;
    readonly $contextVersion: number;
    readonly type: URLValue;
    readonly title: string;
    readonly status: number;
    readonly detail?: string;

    /**
     * @param {String} type     A URI reference [RFC3986] that identifies the problem type.
     *                          When dereferenced, it is encouraged to provide  human-readable documentation for the
     *                          problem type (e.g., using  HTML [W3C.REC-html401-19991224]). When this member is not
     *                          present, its value is assumed to be "about:blank".
     * @param {String} title    A short, human-readable summary of the problem type. It SHOULD NOT change from occurrence
     *                          to occurrence of the problem, except for purposes of localisation.
     * @param {Number} status   The HTTP status code ([RFC7231], Section 6) generated by the origin server for this
     *                          occurrence of the problem.
     * @param {String} detail   An human readable explanation specific to this occurrence of the problem.
     * @constructor
     */
    constructor(type: URLValue, title: string, status: number, detail?: string) {
        super(title);
        Object.setPrototypeOf(this, HttpProblem.prototype);
        this.$context = HttpProblem.$context;
        this.$contextVersion = HttpProblem.$contextVersion;
        this.name = HttpProblem.name;
        this.type = type;
        this.title = NonEmpytyStringType(title, ['HttpProblem', 'title:String']);
        this.status = HttpStatusCodeType(status, ['HttpProblem', 'status:HttpStatusCode']);
        this.detail = MaybeNonEmpytyStringType(detail, ['HttpProblem', 'detail:?String']);
    }

    static fromJSON({__context, __contextVersion, type, title, status, detail}: HttpProblemSchema): HttpProblem {
        VersionedContext.checkContextVersion(HttpProblem, {
            $context: URLValue.fromString(__context, ['HttpProblem.fromJSON()', '$context:URLValue']),
            $contextVersion: __contextVersion
        });
        return new HttpProblem(
            new URLValue(type),
            title,
            status,
            detail
        );
    }

    toJSON(): HttpProblemSchema {
        const {$context, $contextVersion, type, title, status, detail} = this;
        return {
            __context: $context.toString(),
            __contextVersion: $contextVersion,
            type: type.toString(),
            title,
            status,
            detail
        };
    }
}
